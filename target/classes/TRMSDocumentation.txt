70 Functionality, 30 Usable

In A Year
	Employee can claim up to $1000 in coverage
		University Courses: 80%
		Seminars:			60%
		Cert Prep Class:	75%
		Certification:		100
		Technical Training:	90%
		Other:				30%
	
	Approval Process:
		Form Completion by Employee
		Supervisor Approval
		Department Head Approval
		Benefits Coordinator Approval
			Can change any/all terms
		Grade/Presentation
			BenCo -  Confirms grades
			DirSup - Approves presentation
		Reimbursement Award
		
	Employee can see own requests
	Employee can see own subordinate request
	Employee (Dept. Head) can only see his direct subordinates request
		AND requests subordinates approved
	Employee (BenCo) can see requests approved by dept. heads
	BenCo cannot approve own request, use BenCo Head of Dept.
	BenCo Head cannot approve own request, cannot make request in system,
		Will be the SuperUser


TODO
make documentation - rehearse presentation

implement user update page
implement create user page

update unit tests, docs, presentation

beautify front-end
expand responsive design

-------------------------------------------------------------------------












		
FRONTEND
	PAGES - index.html
		Login functionality, only page accessible without logging in
		Reset Password - 
			Send email to USER_LIST.EMAIL with autogenerated password.
			
	PAGES - changepassword
		enter new password, then confirm it, then send.  Client side validated
	
	PAGES - user.html
		Only served after approval from login system,
		logout redirects to index.html
		change password redirects to change password page
			Uses navbar, sidebar to navigate permitted functions, populated at login
			page proper is forwarded based on nav selection, called VIEW
			
			
			
			VIEWS
				Associate
				My Requests
				My Subordinate Requests
				
				Dept Head
				My Requests
				My Subordinate Requests (associate version + subordinate supervisor approved requests)
				
				BenCo
				My Requests
				Requests (Approved by Dept Head)
				Add Employee
				Assign Employee
				Remove Employee
				
				BenCo Head
				Set FY policy
				Set Reimbursement cap policy
				Set Reimbursement % policy
				My Subordinate Requests
				All Requests
				Add Employee
				Assign Employee
				Assign Role
				Remove Employee
				
SERVLET
	Access Servlet

MAPPER
	Maps Access Servlet Requests to Controller Responses
	ACCESS
		login
		changePassword
	
	MANAGEMENT
		addEmployee
		removeEmployee
		assignEmployee
		assignRole
		
	ADMINISTRATION
		allRequests
		viewDefinesPage
		setFY
		setReimbursementAmount
		setReimbursementDefine
	
	ALL
		viewSubordinates
			//show subs, if DH, allow add/remove/assign, if BC, allow Role
		updatePersonalInfo
		viewMyRequests
		submitRequest
		submitDocument
		deleteDocument	
		viewDocuments//allowed for anyone who can see this request
		getReimbursed
		subordinateRequests
		approveReimbursment
		
	ERROR
		400
		401
		403	
		404
		408
		500
		

CONTROLLER
	Calls services based on requests/POST data.  All methods write to HttpServletResponse, and return true on success
	Boolean login(HttpServletRequest request, HttpServletResponse response);
	Boolean updatePassword(HttpServletRequest request, HttpServletResponse response);
	
	Boolean printOrgChart(HttpServletRequest request, HttpServletResponse response);
	Boolean createEmployee(HttpServletRequest request, HttpServletResponse response);
	Boolean reassignEmployee(HttpServletRequest request, HttpServletResponse response);
	Boolean assignRole(HttpServletRequest request, HttpServletResponse response);
	Boolean removeEmployee(HttpServletRequest request, HttpServletResponse response);
	
	Boolean printAllRequests(HttpServletRequest request, HttpServletResponse response);
	Boolean setFY(HttpServletRequest request, HttpServletResponse response);
	Boolean setReimbursementAmount(HttpServletRequest request, HttpServletResponse response);
	Boolean setReimbursementDefines(HttpServletRequest request, HttpServletResponse response);
	
	Boolean updatePersonInfo(HttpServletRequest request, HttpServletResponse response);
	
	Boolean submitRequest(HttpServletRequest request, HttpServletResponse response);
	Boolean printMyRequests(HttpServletRequest request, HttpServletResponse response);
	Boolean addDocument(HttpServletRequest request, HttpServletResponse response);
	Boolean deleteDocument(HttpServletRequest request, HttpServletResponse response);
	Boolean printDocuments(HttpServletRequest request, HttpServletResponse response);
	
	Boolean printSubRequests(HttpServletRequest request, HttpServletResponse response);
	Boolean approveRequest(HttpServletRequest request, HttpServletResponse response);
	Boolean approveReimbursement(HttpServletRequest request, HttpServletResponse response);

SERVICE
	performs validation, decisions on request, calls DAO 
	User login(String username, String password);
	Boolean updatePassword(User u, String password);
	
	List<User> getOrgChart(Integer empID);
	Boolean createEmployee(User u);
	Boolean updateEmployee(User u);
	Boolean assignRole(User u, Integer rID);
	Boolean removeEmployee(User u);
	
	Date getFY();
	Boolean setFY(Date date);
	Double getLimit();
	Boolean setLimit(Double limit);
	Map<String, Integer> getReimbursementDefines();
	Boolean setReimbursementDefine(Integer typeID, Integer percentage);
	
	List<Request> getRequests();
	List<Request> getMyRequests(User u);
	List<Request> getSubRequests(User u);
	List<String> getDocuments(Integer tID);
	Boolean addDocument(Integer tID, String url);
	Boolean deleteDocument(String url);
	
	Boolean approveRequest(Integer tID, Integer empID);
	Boolean approveReimbursement(Integer tID);
	
	
	
MODELS
	User{
		Integer empID;
		String lName;
		String fName;
		String mName;
		String phone;
		String email;
		Integer superID;		
		}
	Request{
		Integer tID;
		Integer fy;
		Integer empID;
		Double transaction;
		Integer status;
		//-2: rejected, -1:pending 0: approved by super, 1: approved by head, 2: approved by benco, 3:paid
		}
		
		

DAO
	CRUD operations
	
	
	
	UserDAO references USER_LIST, SUBORDINATES_OF EMP_ID
		User getUser(Integer empID);
		Boolean createUser(User u);
		Boolean updateUser(User u);
		Boolean deleteUser(User u);
		List<Integer> getAll(Integer empID);
	
	LoginDAO references LOGIN
		Integer login(String username, Integer passwordhash);
		Boolean updatePassword(Integer empID, Integer passwordhash);
		
	PermissionDAO references PERMISSIONS, DEPT_HEADS, BENCOS, BENCO_DEPT_HEAD, ROLES
		Boolean grantRole(Integer empID, Integer rID);
		Boolean revokeRole(Integer empID, Integer rID);
		Boolean revokeAll(Integer empID);
		List<Integer> getRoles(Integer empID);
		List<String> getRoles();
		List<Integer> getHeads();
		List<Integer> getBenCos();
		Integer getBenCoHead();
		
	AccountDAO references ACCOUNTS, ACCOUNT_BALANCE_OF EMP_ID, FY
		Request getRequest(Integer tID);
		Boolean createRequest(Request r);
		Boolean approve(Request r);
		Boolean deny(Request r);
		Boolean updateRequest(Request r);//BenCo Only
		Boolean deleteRequest(Request r);
		Integer getBalance(Integer empID, Integer fy);
		
	DocumentDAO references DOCUMENTS
		List<String> getDocuments(Integer tID);
		Boolean addDocuments(List<String> url, Integer tID);		
		Boolean deleteDocument(String url, Integer tID);
		Boolean deleteAllDocuments(Integer tID);
	
	VarsDAO references 	FY_START_DATE, CURRENT_FY, NEXT_FY_TR_AMOUNT, TR_AMOUNT
		Date getFYStart();
		Boolean setFYStart(Date date);
		Integer getFY();
		Integer incrementFY();
		Double getTrAmount();
		Double getnextTrAmount();
		Double setnextTrAmount(Double limit);
	
	TuitionTypeDAO references TUITION_TYPE
		Map<String, Integer> getAllTypes();
		Integer getTuition(String type);
		Boolean setTuition(String type, Integer percentage);


	
JDBC
	connects DAO to Database
				
DATABASE
	LOGIN
	USERNAME PK, PASSWORDHASH, EMP_ID FK UNIQUE 

	USER_LIST
	EMP_ID PK, USERNAME UNIQUE, PASSWORDHASH, LNAME, FNAME, MNAME, PHONE, EMAIL, SUPER_ID FK, DEPT_ID
	
	ROLES -- reference table
	ROLE_ID PK, TITLE UNIQUE
		0, Associate,
		1, Department Head, 
		2, Benefits Coordinator
	
	PERMISSIONS -- junction table
	USER_LIST.EMP_ID FK,  ROLES.ROLE_ID FK
	
	DEPARTMENTS
	DEPT_ID PK, DEPT_NAME, EMP_ID
	
	ACCOUNTS
	T_ID PK, FY NOTNULL, USER_LIST.EMP_ID FK, TRANSACTION, STATUS
	
	DOCUMENTS
	URL PK, T_ID FK
	
	
	
	TUITION_TYPE -- reference table
	TYPE_ID PK, TYPENAME, PERCENTAGE
	0,	University Courses, 80%
	1,	Seminars,			60%
	2,	Cert Prep Class,	75%
	3,	Certification,		100
	4,	Technical Training,	90%
	5,	Other,				30%
	
	DUAL
		FY_START_DATE
		CURRENT_FY
		NEXT_FY_TR_AMOUNT
		TR_AMOUNT
	
	
	
VIEWS
	SUBORDINATES_OF EMP_ID
	
	ACCOUNT_BALANCE_OF EMP_ID, FY
	
	DEPT_HEADS
	
	BENCOS
	
	BENCO_DEPT_HEAD
	
	
	 